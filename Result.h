#pragma once
#ifndef Result_H
#define Result_H

#include "Unit.h"
#include "Date.h"


#include <string>
#include <fstream>
#include <iostream>

using namespace std;

/*******************************************************************************************************
* @class Result.h
*
* @brief Creates a Result object to contain the following information
*
* @purpose to read information related to Result from a file and write it to another
*
*
* @variables
*		a unit object gathered from the unit class
*		a float mark
*		a date object gathered from the date class
*
*
* @author William Halling 32233703
* @date   April 2021
* @date   Semester 1
*
* @updated April 2021
*******************************************************************************************************/

class Result
{
public:

	Result();
	Result(Unit temp_Unit, float temp_Mark, Date temp_Date);


		/******************************************************************************************************************************************************************************************************************************************************
		 *@brief Clear
		 *
		 * Purpose : Sets all the Result Variable values to default object, 0, default obj
		 *
		 *@return  : void
		 ******************************************************************************************************************************************************************************************************************************************************/

	void Clear();



		/******************************************************************************************************************************************************************************************************************************************************
		* @brief get_Unit
		*
		* @Purpose: This is used to get a unit object from the unit class
		*
		* @return Unit m_One_Unit
		******************************************************************************************************************************************************************************************************************************************************/

	const Unit& get_Unit() const;



		/******************************************************************************************************************************************************************************************************************************************************
		* @brief set_Unit
		*
		* @Purpose : This is used to set a unit object with a blank unit object
		*
		* @param   : Unit temp_Unit
		*
		* @return  : void
		******************************************************************************************************************************************************************************************************************************************************/

	void set_Unit(Unit temp_Unit);




		/******************************************************************************************************************************************************************************************************************************************************
		* @brief get_Result
		*
		* @Purpose : This is used to get the result of a marked unit
		*
		* @param   :
		*
		* @return  :  m_Mark (const float)
		******************************************************************************************************************************************************************************************************************************************************/

	float get_Result() const;


		/******************************************************************************************************************************************************************************************************************************************************
		* @brief set_Result
		*
		* @Purpose : This is used to set m_Result with the value temp_Mark
		*
		* @param   : float temp_Mark
		*
		* @return  : void
		******************************************************************************************************************************************************************************************************************************************************/

	void set_Result(float temp_Mark);




		/******************************************************************************************************************************************************************************************************************************************************
		* @brief get_Date
		*
		* @Purpose : This is used to get a date object from the date class
		*
		* @param   :
		*
		* @return  : Date m_Marked_Date (const Date)
		******************************************************************************************************************************************************************************************************************************************************/

	const Date& get_Date() const;


		/*******************************************************************************************************************************************************************************************************************************************************
		* @brief set_Date
		*
		* @Purpose : This is used to set a date object with a temp_Date Object
		*
		* @param   : Date temp_Date
		*
		* @return  : void
		*********************************************************************************************************************************************************************************************************************************************************/

	void set_Date(Date temp_Date);





	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		/*			 Variables for Result			                                                 */
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

private:

	float m_Mark;


	///creates a unit with unit infromation from the unit class
	Unit  m_One_Unit;


	///creates a date object with date as day month year from the date class
	Date  m_Marked_Date;

};


	/************************************************************************************************************************************************************************************************************************************************************
	 * @brief ostream operator
	 *
	 * @Purpose : overloads the istream operator to write Result object informaiton  to a file
	 *
	 * @param   : std::ostream& output_s, const Result& result_Achieved
	 *
	 * @return  : output_s
	 ************************************************************************************************************************************************************************************************************************************************************/

std::ostream& operator <<(std::ostream& output_s, const Result& result_Achieved);



	/***************************************************************************************************************************************************************************************************************************************************************************************************************************
	 * @brief istream operator
	 *
	 * @Purpose  : overloads the istream operator to read Result object information from a file
	 *
	 * @param    : std::istream& input, Result& result_Achieved
	 *
	 * @return   : input
	 ***********************************************************************************************************************************************************************************************************************************************************/

std::istream& operator >>(std::istream& input, Result& result_Achieved);



#endif
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	/*			End of headder		                                          */
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------