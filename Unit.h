#pragma once
#ifndef Unit_H
#define Unit_H

#include <string>

#include <fstream>
#include <iostream>


using namespace std;


/********************************************************************************************************************************************************************************************************************************************************
* @class Unit.h
*
* @brief Contains the following information about a unit at Murdoch University
*
* @purpose to read all unit information from a file and write it to another
*
*
* @variables
*		Unit Name    as a string
*		Unit Code    as a string
*		Unit Credits as a int
*
*
* @author William Halling 32233703
* @date    Semester 1 March 2021
*
* @updated April 2021
********************************************************************************************************************************************************************************************************************************************************/

class Unit
{

public:

	Unit();
	/// constructor holds a unit name, unit code and credit points
	Unit(std::string temp_Name, std::string temp_Code, unsigned temp_Credits);


		/********************************************************************************************************************************************************************************************************************************************************
		 *@brief Clear
		 *
		 * Purpose  : Removes all elements from the Unit list setting the size to 0
		 *            and sets the Unit data variable values to " ", " ", 0
		 *
		 *
		 *@return  : void
		 ********************************************************************************************************************************************************************************************************************************************************/

	void Clear();




		/********************************************************************************************************************************************************************************************************************************************************
		 *@brief get_Unit_Name() const
		 *
		 * Purpose :   Gets the unit Name variable as a std::string const
		 *
		 *@return  : unit_Name (C++ std::string const)
		 ********************************************************************************************************************************************************************************************************************************************************/

	std::string get_Unit_Name() const;



		/********************************************************************************************************************************************************************************************************************************************************
		 * @brief set_Unit_Name() - sets the unit name
		 *
		 * @Purpose :   sets the unit name of a unit object using std::string const
		 *
		 * @param   :   C++ std::string
		 *
		 * @return  : void
		 ********************************************************************************************************************************************************************************************************************************************************/

	void  set_Unit_Name(std::string temp_Name);




		/********************************************************************************************************************************************************************************************************************************************************
		 * @brief get_Unit_Code() - gets the unit code of a unit object
		 *
		 * @Purpose : gets the unit code variable as a std::string const
		 *
		 *
		 * @return  : C++ std::string const unit_Code
		 ********************************************************************************************************************************************************************************************************************************************************/

	std::string get_Unit_Code() const;



		/********************************************************************************************************************************************************************************************************************************************************
		 * @brief set_Unit_Code() - sets the unit code of a unit object
		 *
		 * @Purpose :   sets the unit code of a unit object as a std::string const
		 *
		 * @param   :   c++ std::string
		 *
		 * @return  : void
		 ********************************************************************************************************************************************************************************************************************************************************/

	void set_Unit_Code(std::string temp_Unit_Code);



		/********************************************************************************************************************************************************************************************************************************************************
		 * @brief GetCredits() - gets the unit credits of a unit object
		 *
		 * @Purpose :   gets the unit credits of a unit object as a unsigned const
		 *
		 * @param   :
		 *
		 * @return  : unsigned const unit_Credits
		 ********************************************************************************************************************************************************************************************************************************************************/

	unsigned GetCredits() const;



		/********************************************************************************************************************************************************************************************************************************************************
		 * @brief setCredits() - sets the unit credits of a unit object
		 *
		 * @Purpose :    sets the unit code of a unit object as a std::string const
		 *
		 * @param   :   unsigned int
		 *
		 * @return  : void
		 ********************************************************************************************************************************************************************************************************************************************************/

	void  setCredits(unsigned temp_Credits);




	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		/*			variables for unit information                         */
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


private:

	/// unit name, as a c++ string object
	std::string m_Unit_Name;


	/// unit Code as a C++ string object
	std::string m_Unit_Code;


	/// unit credits as an unsigned int
	unsigned unit_Credits;
};


	/********************************************************************************************************************************************************************************************************************************************************
	 * @brief std::ostream operator
	 *
	 * @Purpose : overloads ostream operator to write / read unit objects
	 *
	 * @param   : std::ostream& output_s, const Unit& unit_Information
	 * 
	 * @return  : output_s
	 *********************************************************************************************************************************************************************************************************************************************************/

std::ostream& operator <<(std::ostream& output_s, const Unit& unit_Information);




	/********************************************************************************************************************************************************************************************************************************************************
	 * @brief istream operator
	 *
	 * @Purpose : overloads the istream operator to read / write unit objects
	 *
	 * @param   : std::istream& input, Unit unit_Information
	 *
	 * @return  : input
	 ********************************************************************************************************************************************************************************************************************************************************/

std::istream& operator >>(std::istream& input, Unit unit_Information);



#endif 
// !Unit_H
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
/* End of headder */
//-------------------------------------------------------------------------------------------------------------------------------------------------------------